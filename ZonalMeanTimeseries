var polygons = ee.FeatureCollection("INSERT THE ASSET OF YOUR FEATURE COLLECTION");

Map.addLayer(polygons);

// Define the region of interest (Santa Clara Valley)
var roi = ee.Geometry.Rectangle([-122.2192764,36.9134448,-121.3211341,37.4543174]);

Map.addLayer(roi);

// Define the date range
var startDate = ee.Date('2019-01-01'); // 2019-01-01
var endDate = ee.Date('2021-12-31'); // 2021-12-31

// Load the Sentinel-2 Level 2A image collection
var collection = ee.ImageCollection('COPERNICUS/S2_SR_HARMONIZED')
  .filterBounds(roi)
  .filterDate(startDate, endDate)
  .sort('system:time_start'); 
  
// Function to calculate NDVI for each image
var calculateNDVI = function(image) {
  var ndvi = image.normalizedDifference(['B8', 'B4']).rename('NDVI');
  return image.addBands(ndvi);
};

// Apply the function to each image in the collection
var newCollection = collection.map(calculateNDVI);

// Function to calculate MCARI for each image
var calculateMCARI = function(image) {
  var mcari = image.expression(
    '((RED_EDGE_1 - RED) - 0.2 * (RED_EDGE_1 - GREEN)) * (RED_EDGE_1/RED)',
    {
      'RED': image.select('B4'), // 10 m
      'RED_EDGE_1': image.select('B5'), // 20 m
      'GREEN': image.select('B3') // 10 m
    }
  ).rename('MCARI');
  return image.addBands(mcari); // GEE automatically resamples to the lowest res: 10 m 
};

// Apply the function to each image in the collection
var newCollection = newCollection.map(calculateMCARI);

// Function to calculate MCARI2 for each image
var calculateMCARI2 = function(image) {
  var mcari2 = image.expression(
    '1.5 * (2.5 * (NIR - RED) - 1.3* (NIR - GREEN)) / sqrt( (2*NIR+1)*(2*NIR+1) - (6*NIR - 5*sqrt(RED) - 0.5) )',
    {
      'RED': image.select('B4'), // 10 m, rho_~670nm
      'GREEN': image.select('B3'), // 10 m, rho_~550nm
      'NIR': image.select('B8') // 10 m, rho_~800nm
    }
  ).rename('MCARI2');
  return image.addBands(mcari2); // GEE automatically resamples to the lowest res: 10 m 
};

// Apply the function to each image in the collection
var newCollection = newCollection.map(calculateMCARI2);

// Function to calculate NDI45 for each image
var calculateNDI45 = function(image) {
  var ndi45 = image.normalizedDifference(['B5', 'B4']).rename('NDI45');
  return image.addBands(ndi45);
};

// Apply the function to each image in the collection
var newCollection = newCollection.map(calculateNDI45);

// Function to calculate NDI46 for each image
var calculateNDI46 = function(image) {
  var ndi46 = image.normalizedDifference(['B6', 'B4']).rename('NDI46');
  return image.addBands(ndi46);
};

// Apply the function to each image in the collection
var newCollection = newCollection.map(calculateNDI46);

// Function to calculate NDI47 for each image
var calculateNDI47 = function(image) {
  var ndi47 = image.normalizedDifference(['B7', 'B4']).rename('NDI47');
  return image.addBands(ndi47);
};

// Apply the function to each image in the collection
var newCollection = newCollection.map(calculateNDI47);

// Function to calculate NDWI11 for each image
var calculateNDWI11 = function(image) {
  var ndwi11 = image.normalizedDifference(['B8', 'B11']).rename('NDWI11');
  return image.addBands(ndwi11);
};

// Apply the function to each image in the collection
var newCollection = newCollection.map(calculateNDWI11);

// Function to calculate NDWI 12 for each image
var calculateNDWI12 = function(image) {
  var ndwi12 = image.normalizedDifference(['B8', 'B12']).rename('NDWI12');
  return image.addBands(ndwi12);
};

// Apply the function to each image in the collection
var newCollection = newCollection.map(calculateNDWI12);

// Calculate zonal statistics for each feature in the polygons feature collection
var zonalStats = newCollection.map(function(image) {
  var stats = image.reduceRegions({
    collection: polygons,
    reducer: ee.Reducer.mean(),
    scale: 10
  });

  return stats.map(function(feature) {
    // Add the date and feature ID as properties to each feature
    var date = image.date().format('YYYY-MM-dd');
    return feature.set('date', date)
                 .set('featureID', feature.get('UniqueID'));
  });
}).flatten();

// Export the zonal statistics as a CSV file
Export.table.toDrive({
  collection: zonalStats,
  description: 'zonal_statistics',
  fileFormat: 'CSV'
});
